A fully functional basic setup. 
Ensure that you replace <your MongoDB connection string> with your actual MongoDB connection string. 
You'll need to have a MongoDB instance running, either locally or on a cloud provider like MongoDB Atlas.

This basic setup doesn't contain CSS as it's quite lengthy and would typically depend on your design choices, but this setup does have basic functionality.

app.js

javascript
Copy code
const express = require('express');
const mongoose = require('mongoose');
const bodyParser = require('body-parser');
const path = require('path');

// Create Express app
const app = express();

// Set up mongoose connection
const mongoDB = '<your MongoDB connection string>';
mongoose.connect(mongoDB, { useNewUrlParser: true , useUnifiedTopology: true});
const db = mongoose.connection;
db.on('error', console.error.bind(console, 'MongoDB connection error:'));

// Use body-parser
app.use(bodyParser.json());
app.use(bodyParser.urlencoded({ extended: false }));

// Serve static files from 'public' directory
app.use(express.static(path.join(__dirname, 'public')));

// Define schema and model
const Schema = mongoose.Schema;

const ProductSchema = new Schema({
    name: String,
    price: Number,
    category: String,
    description: String,
    image: String,
});

const Product = mongoose.model('Product', ProductSchema);

// Create and save sample products
const categories = ['Outerwear', 'Formalwear', 'Outdoor Gear'];
const sampleProducts = [];

for(let i = 1; i <= 20; i++) {
    let product = new Product({
        name: `Product ${i}`,
        price: i * 10,
        category: categories[i % categories.length],
        description: `This is product ${i}`,
        image: `/images/product${i}.jpg`
    });

    sampleProducts.push(product);
}

Product.insertMany(sampleProducts, function(error, docs) {});

// Set up routes and start the server
app.set('view engine', 'ejs');

app.get('/products', (req, res) => {
    Product.find({}, (err, products) => {
        if(err) return res.status(500).send(err);
        res.render('products', { products: products });
    });
});

app.get('/products/:id', (req, res) => {
    Product.findById(req.params.id, (err, product) => {
        if(err) return res.status(500).send(err);
        res.render('product', { product: product });
    });
});

app.listen(3000, () => {
    console.log('Server is running on port 3000');
});
views/products.ejs



html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title>All Products</title>
</head>
<body>
    <h1>All Products</h1>
    <% products.forEach(product => { %>
        <h2><a href="/products/<%= product._id %>"><%= product.name %></a></h2>
        <h3><%= product.category %></h3>
        <h3>$<%= product.price %></h3>
        <p><%= product.description %></p>
    <% }) %>
</body>
</html>
views/product.ejs

html
Copy code
<!DOCTYPE html>
<html>
<head>
    <title><%= product.name %></title>
</head>
<body>
    <h1><%= product.name %></h1>
    <img src="<%= product.image %>" alt="<%= product.name %>">
    <h2><%= product.category %></h2>
    <h2>$<%= product.price %></h2>
    <p><%= product.description %></p>
</body>
</html>
For this code to run properly, ensure you have a folder named "public" in your root directory and within it another folder named "images" where you store your product images. 
The images should be named 'product1.jpg', 'product2.jpg', and so forth up to 'product20.jpg' as per the setup in this script.

You can run this project by typing node app.js in your terminal. The server will be running on http://localhost:3000/. 
You can view all products at http://localhost:3000/products, and each individual product at http://localhost:3000/products/<product id>.
